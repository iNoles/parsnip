package com.jonathansteele.parsnip

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import kotlinx.metadata.KmClass
import javax.lang.model.element.TypeElement

class AdapterGenerator(
    private val kmClass: KmClass,
    private val packageName: String,
    private val type: TypeElement
) {
    private val adapterName = "${kmClass.name}_XmlAdapter"

    private val className = ClassName.bestGuess(kmClass.name)

    private val parsnipParam = ParameterSpec
        .builder("parsnip", Parsnip::class.asClassName())
        .build()
    private val readerParam = ParameterSpec
        .builder("reader", XmlReader::class)
        .build()
    private val writerParam = ParameterSpec
        .builder("writer", XmlWriter::class)
        .build()
    private val valueParam = ParameterSpec
        .builder("value", className.copy(nullable = true))
        .build()

    private val xmlAdapterTypeName = XmlAdapter::class.asClassName().parameterizedBy(
        className
    )

    fun prepare() : FileSpec {
        val result = FileSpec.builder(packageName, adapterName)
        result.addComment("Code generated by parsnip-kotlin-codegen. Do not edit.")
        result.addType(generateType())
        return result.build()
    }

    private fun generateType(): TypeSpec {
        val result = TypeSpec.classBuilder(adapterName)
            .superclass(xmlAdapterTypeName)
            .primaryConstructor(generateConstructor())
            .addOriginatingElement(type)
        result.addFunction(generateFromXmlFun())
        result.addFunction(generateToXmlFun())
        return result.build()
    }

    private fun generateConstructor(): FunSpec =
        FunSpec.constructorBuilder().addParameter(parsnipParam).build()

    private fun generateFromXmlFun(): FunSpec {
        val result = FunSpec.builder("fromXml")
            .addModifiers(KModifier.OVERRIDE)
            .addParameter(readerParam)
            .returns(className)
        return result.build()
    }

    private fun generateToXmlFun(): FunSpec {
        val result = FunSpec.builder("toXml")
            .addModifiers(KModifier.OVERRIDE)
            .addParameter(writerParam)
            .addParameter(valueParam)
        kmClass.properties.forEach {
            result.addStatement("%N.name(%S)", writerParam, it.name)
        }
        return result.build()
    }
}